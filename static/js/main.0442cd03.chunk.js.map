{"version":3,"sources":["api/api.js","store/weater.js","store/index.js","components/InfoBox/InfoBox.jsx","components/SearchBar/SearchBar.jsx","App.jsx","index.jsx"],"names":["getWeather","city","fetch","initialState","weather","error","isLoading","cityName","SET_CITY","SET_WEATHER","SET_LOADING","SET_ERROR","actions","type","payload","value","selectors","state","weatherSelectors","dispatch","a","weatherActions","response","ok","json","result","reducer","combineReducers","store","createStore","applyMiddleware","thunk","InfoBox","n","useSelector","loading","undefined","name","className","height","width","main","temp","toFixed","description","src","icon","alt","SearchBar","useState","setCity","apliedCity","setApliedCity","useDispatch","apply","useCallback","f","delay","timerId","args","clearTimeout","setTimeout","debounce","useEffect","htmlFor","classNames","length","placeholder","onChange","event","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0442cd03.chunk.js","sourcesContent":["const URL_API = 'https://api.openweathermap.org/data/2.5/weather?q=';\nconst KEY_IPI = 'e403a5a5f562cc6e20d38fb329ee4738';\n\nexport const icon = (value) => {\n  return `http://openweathermap.org/img/wn/${value}@2x.png`\n};\n\nexport const getWeather = (city) => {\n  return fetch(`${URL_API}${city}&appid=${KEY_IPI}`);\n};\n","const initialState = {\n  weather: {},\n  error: false,\n  isLoading: true,\n  cityName: '',\n};\n\nconst SET_CITY = 'SET_CITY';\nconst SET_WEATHER = 'weather/SET_WEATHER';\nconst SET_LOADING = 'SET_LOADING';\nconst SET_ERROR = 'SET_ERROR';\n\nexport const actions = {\n  setWeather: (weather) => ({\n    type: SET_WEATHER,\n    payload: weather,\n  }),\n  setError: (value) => ({\n    type: SET_ERROR,\n    payload: value,\n  }),\n  setLoading: (value) => ({\n    type: SET_LOADING,\n    payload: value,\n  }),\n  setCityName: (value) => ({\n    type: SET_CITY,\n    payload: value,\n  }),\n};\n\nexport const selectors = {\n  getWeather: state => state.weather,\n  getError: state => state.error,\n  getIsLoading: state => state.isLoading,\n  getCity: state => state.cityName,\n};\n\nexport default (state = initialState, actions) => {\n  switch (actions.type) {\n    case SET_WEATHER:\n      return {\n        ...state,\n        weather: actions.payload,\n      };\n    case SET_CITY:\n      return {\n        ...state,\n        cityName: actions.payload,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        isLoading: actions.payload,\n      };\n    case SET_ERROR:\n      return {\n        ...state,\n        error: actions.payload,\n      };\n    default:\n      return state;\n  };\n};\n","import { createStore,\n  combineReducers,\n  applyMiddleware } from 'redux';\nimport { getWeather } from '../api/api';\nimport thunk from 'redux-thunk';\n\nimport weatherReduser, {\n  selectors as weatherSelectors,\n  actions as weatherActions,\n} from './weater';\n\nexport const selectors =  {\n  getWeather: state => weatherSelectors.getWeather(state.weather),\n  getError: state => weatherSelectors.getError(state.weather),\n  getIsLoading: state => weatherSelectors.getIsLoading(state.weather),\n  getCity: state => weatherSelectors.getCity(state.weather),\n}\n\nexport const actions = {\n  infoFromServer: (city) => {\n    return async (dispatch) => {\n      dispatch(weatherActions.setLoading(true));\n      dispatch(weatherActions.setCityName(city));\n\n      try {\n        const response = await getWeather(city);\n        if(response.ok) {\n          const result = await response.json();\n          dispatch(weatherActions.setError(false));\n          dispatch(weatherActions.setWeather(result));\n          dispatch(weatherActions.setLoading(false));\n          return;\n        };\n\n        dispatch(weatherActions.setError(true));\n        return dispatch(weatherActions.setWeather({}));\n      } catch (error) {\n\n      };\n    };\n  },\n};\n\nconst reducer = combineReducers({\n  weather: weatherReduser,\n});\n\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport ReactLoading from 'react-loading';\n\nimport './InfoBlock.scss';\nimport { selectors } from '../../store'\nimport { icon } from '../../api/api';\n\nconst kelvinToCelsia = (n) => {\n  return (n - 263.25).toFixed(2)\n};\n\nexport const InfoBox = () => {\n\n  const weather = useSelector(selectors.getWeather);\n  const loading = useSelector(selectors.getIsLoading);\n\n  return (\n    <>  \n      {loading === true &&\n        weather.name === undefined ? (\n          <div className=\"info_loader\">\n            <ReactLoading type=\"spinningBubbles\" height=\"100px\" width=\"100px\"/>\n          </div>\n      ) : (\n        <div className=\"info\">\n          <div className=\"info_container\">\n            <div className=\"info_wrapper-first\">\n              <h2 className=\"info_title\">\n                {`The weather in Minsk: ${weather.name}`}\n              </h2>\n            </div>\n            <div className=\"info_wrapper-second\">\n              <h3 className=\"info_tempature\">\n                {kelvinToCelsia(weather.main.temp)}&deg;C\n              </h3>\n              <div className=\"info_weather\">\n                {`${weather.weather[0].main}`}\n                <p>\n                  {`${weather.weather[0].description}`}\n                </p>\n                <div>\n                  <img\n                    src={icon(weather.weather[0].icon)}\n                    alt=\"icon weather\"\n                    className=\"info_img\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n","import React, {\n  useCallback,\n  useState,\n  useEffect\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport './SearchBar.scss';\nimport { actions, selectors } from '../../store';\nimport { actions as weatherActions } from '../../store/weater';\n\nconst debounce = (f, delay) => {\n  let timerId\n\n  return (...args) => {\n    if(timerId) {\n      clearTimeout(timerId)\n    };\n\n    timerId = setTimeout(() => {\n      f(...args)\n    }, delay);\n  };\n};\n\nexport const SearchBar = () => {\n  const [city, setCity] = useState('');\n  const [apliedCity, setApliedCity] = useState('');\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectors.getError);\n\n  const apply = useCallback(\n    debounce(setApliedCity, 1000),\n    []\n  );\n\n  useEffect(() => {\n    dispatch(actions.infoFromServer(apliedCity))\n  }, [apliedCity]);\n\n  return (\n    <>\n      <div className=\"search\">\n        <div className=\"search_container\">\n          <label htmlFor=\"search\" className={classNames('search_label', {\n            \"search_label-error\": error && city.length > 0,\n          })}>\n            {error && city.length > 0 ? (\n              'This city does not exist: '\n            ) : (\n              'Enter the city name :'\n            )}\n          </label>\n          <input\n            type=\"text\"\n            className={classNames(\"search_input\", {\n              \"search_input-error\": error && city.length > 0,\n            })}\n            value={city}\n            placeholder=\"Enter city name\"\n            onChange={(event) => {\n              apply(event.target.value);\n              setCity(event.target.value);\n              dispatch(weatherActions.setError(false));\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nimport './App.scss';\n\nimport { InfoBox } from './components/InfoBox';\nimport { SearchBar } from './components/SearchBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <SearchBar />\n        <InfoBox />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}